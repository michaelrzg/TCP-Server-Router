Index: src/SThread.java
===================================================================
diff --git a/src/SThread.java b/src/SThread.java
--- a/src/SThread.java	
+++ b/src/SThread.java	
@@ -2,14 +2,14 @@
 import java.net.*;
 import java.lang.Exception;
 
-	
-public class SThread extends Thread 
+
+public class SThread extends Thread
 {
 	private File RTable; // routing table
 	private PrintWriter out, outTo , pw; // writers (for writing back to the machine and to destination)
 	private Scanner sc;
-   private BufferedReader in; // reader (for reading from the machine connected to)
-	Scanner sc;
+    private BufferedReader in; // reader (for reading from the machine connected to)
+	private Scanner sc;
 	private String inputLine, outputLine, destination, addr; // communication strings
 	private Socket outSocket; // socket for communicating with a destination
 	private int ind; // indext in the routing table
@@ -29,7 +29,7 @@
 
 
 	}
-	
+
 	// Run method (will run for each machine that connects to the ServerRouter)
 	public void run()
 	{
@@ -40,39 +40,39 @@
 		PrintWriter pw = new Printwriter()
 		System.out.println("Forwarding to " + destination);
 		out.println("Connected to the router."); // confirmation of connection
-		
+
 		// waits 10 seconds to let the routing table fill with all machines' information
 		try{
-    		Thread.currentThread().sleep(10000); 
+    		Thread.currentThread().sleep(10000);
 	   }
 		catch(InterruptedException ie){
 		System.out.println("Thread interrupted");
 		}
-		
+
 		// loops through the routing table to find the destination
-		for ( int i=0; i<10; i++) 
+		for ( int i=0; i<10; i++)
 				{
 					if (destination.equals((String) RTable[i][0])){
 						outSocket = (Socket) RTable[i][1]; // gets the socket for communication from the table
 						System.out.println("Found destination: " + destination);
 						outTo = new PrintWriter(outSocket.getOutputStream(), true); // assigns a writer
 				}}
-		
-		// Communication loop	
+
+		// Communication loop
 		while ((inputLine = in.readLine()) != null) {
             System.out.println("Client/Server said: " + inputLine);
             if (inputLine.equals("Bye.")) // exit statement
 					break;
             outputLine = inputLine; // passes the input from the machine to the output string for the destination
-				
-				if ( outSocket != null){				
+
+				if ( outSocket != null){
 				outTo.println(outputLine); // writes to the destination
-				}			
-       }// end while		 
+				}
+       }// end while
 		 }// end try
 			catch (IOException e) {
                System.err.println("Could not listen to socket.");
                System.exit(1);
          }
 	}
-}
\ No newline at end of file
+}
